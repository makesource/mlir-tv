#map0 = affine_map<(d0, d1, d2) -> (d0, d1)>
#map1 = affine_map<(d0, d1, d2) -> (d0, d2)>
#map2 = affine_map<(d0, d1) -> (d0, d1)>
#map3 = affine_map<(d0, d1) -> (d1)>
#map4 = affine_map<(d0, d1) -> (d0)>
#map5 = affine_map<(d0, d1, d2) -> (d2)>
#map6 = affine_map<(d0, d1, d2) -> (d0, d1, d2)>
module  {

  func @main2(%4 : tensor<1x16xf32>) -> tensor<1x2xf32> {
    %cst = arith.constant 1.000000e+00 : f32
    %cst_0 = arith.constant 0.000000e+00 : f32
    %cst_1 = arith.constant dense<[[0.091361463, -0.0968776941], [-1.23269629, 0.771379471], [1.33242488, -1.36363328], [0.92142266, -1.1110599], [-0.445623249, -0.304591209], [0.849273681, -1.05579722], [-1.27237022, 0.795746565], [1.28574562, -1.3122592], [0.436188251, 0.352218777], [-0.963210225, 1.04682362], [0.745473146, -1.18796027], [-0.255745709, -0.0409261398], [-1.4491415, 1.05883229], [-1.4687326, 1.48620188], [0.900665163, -1.13325548], [-1.36293614, 1.03072512]]> : tensor<16x2xf32>
    %cst_2 = arith.constant 3.40282347E+38 : f32
    %cst_3 = arith.constant dense<"0xtensor<16x16xf32>
    %cst_6 = arith.constant dense<[-0.00698487554, 0.0294856895, 0.0699710473, 0.130019352, -0.0490558445, 0.0987673401, 0.0744077861, 0.0948959812, -0.010937131, 0.0931261852, 0.0711835548, -0.0385615043, 9.962780e-03, 0.00283221388, 0.112116851, 0.0134318024]> : tensor<16xf32>
    %cst_7 = arith.constant dense<[0.043447677, -0.0434476472]> : tensor<2xf32>
    %5 = linalg.init_tensor [1, 16] : tensor<1x16xf32>
    %6 = linalg.fill(%cst_0, %5) : f32, tensor<1x16xf32> -> tensor<1x16xf32> 
    %7 = linalg.matmul ins(%4, %cst_3 : tensor<1x16xf32>, tensor<16x16xf32>) outs(%6 : tensor<1x16xf32>) -> tensor<1x16xf32>
    %8 = linalg.init_tensor [1, 16] : tensor<1x16xf32>
    %9 = linalg.generic {indexing_maps = [#map3, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%cst_6, %7 : tensor<16xf32>, tensor<1x16xf32>) outs(%8 : tensor<1x16xf32>) {
    ^bb0(%arg1: f32, %arg2: f32, %arg3: f32):  // no predecessors
      %21 = arith.addf %arg1, %arg2 : f32
      %22 = arith.cmpf olt, %21, %cst_0 : f32
      %23 = select %22, %cst_0, %21 : f32
      %24 = arith.cmpf olt, %cst_2, %21 : f32
      %25 = select %24, %cst_2, %23 : f32
      linalg.yield %25 : f32
    } -> tensor<1x16xf32>
    %10 = linalg.init_tensor [1, 2] : tensor<1x2xf32>
    %11 = linalg.fill(%cst_0, %10) : f32, tensor<1x2xf32> -> tensor<1x2xf32> 
    %12 = linalg.matmul ins(%9, %cst_1 : tensor<1x16xf32>, tensor<16x2xf32>) outs(%11 : tensor<1x2xf32>) -> tensor<1x2xf32>
    %13 = linalg.init_tensor [1] : tensor<1xf32>
    %14 = linalg.fill(%cst_0, %13) : f32, tensor<1xf32> -> tensor<1xf32> 
    %15 = linalg.generic {indexing_maps = [#map3, #map2, #map4], iterator_types = ["parallel", "reduction"]} ins(%cst_7, %12 : tensor<2xf32>, tensor<1x2xf32>) outs(%14 : tensor<1xf32>) {
    ^bb0(%arg1: f32, %arg2: f32, %arg3: f32):  // no predecessors
      %21 = arith.addf %arg1, %arg2 : f32
      %22 = math.exp %21 : f32
      %23 = arith.addf %22, %arg3 : f32
      linalg.yield %23 : f32
    } -> tensor<1xf32>
    %16 = tensor.expand_shape %15 [[0, 1]] : tensor<1xf32> into tensor<1x1xf32>
    %17 = tensor.expand_shape %12 [[0, 1], [2]] : tensor<1x2xf32> into tensor<1x1x2xf32>
    %18 = linalg.init_tensor [1, 1, 2] : tensor<1x1x2xf32>
    %19 = linalg.generic {indexing_maps = [#map5, #map6, #map0, #map6], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_7, %17, %16 : tensor<2xf32>, tensor<1x1x2xf32>, tensor<1x1xf32>) outs(%18 : tensor<1x1x2xf32>) {
    ^bb0(%arg1: f32, %arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %21 = arith.divf %cst, %arg3 : f32
      %22 = arith.addf %arg1, %arg2 : f32
      %23 = math.exp %22 : f32
      %24 = arith.mulf %23, %21 : f32
      linalg.yield %24 : f32
    } -> tensor<1x1x2xf32>
    %20 = tensor.collapse_shape %19 [[0, 1], [2]] : tensor<1x1x2xf32> into tensor<1x2xf32>
    return %20 : tensor<1x2xf32>
  }
}

